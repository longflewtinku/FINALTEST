package com.linkly.libengine.config;


import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.openMocks;

import com.linkly.libbins.BinRanges;
import com.linkly.libconfig.cpat.CardProductCfg;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockedStatic;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class BinRangesCfgTest {
    @Mock
    private PayCfg mockPayCfg;
    // real instance
    BinRangesCfg binRangesCfg;

    List<BinRanges.BinRange> binRanges = new ArrayList<>();

    private List<CardProductCfg> getCardCfg(){
        CardProductCfg plbTrue = new CardProductCfg();
        plbTrue.setProductLevelBlocking(true);

        CardProductCfg plbFalse = new CardProductCfg();
        plbFalse.setProductLevelBlocking(false);

        return Arrays.asList(
                plbFalse,
                plbTrue,
                plbFalse
        );
    }

    private final List<CardProductCfg> cardProductCfgs = getCardCfg();

    @Before
    public void setUp() throws Exception {
        openMocks(this);

        binRangesCfg = new BinRangesCfg();
        BinRanges binObj = new BinRanges();

        binObj.addIinRange(binRanges
                "Visa Debit");
        binObj.addIinRange(binRanges
                "Visa Credit");
        binObj.addIinRange(binRanges, 2, "40-49,",
                "Visa Catchall");
        binObj.addIinRange(binRanges, 3, "30-39,",
                "No card config");


        when(mockPayCfg.getCards()).thenReturn(cardProductCfgs);
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public void testNoMatch() {
        assertEquals(-1,binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "99291231****3123=291912931203712377"));
    }

    @Test
    public void testMatchVisaDebit() {
        assertNotEquals(-1,binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "423953******3123=291912931203712377"));
    }

    @Test
    public void testMatchVisaCredit() {
        assertEquals(1,binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "491100******3123=291912931203712377"));
    }

    @Test
    public void testMatchVisaCatchall() {
        assertEquals(2,binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "499003******3123=291912931203712377"));
    }

    @Test
    public void testNoCardConfig() {
        assertEquals(-1,binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "399003******3123=291912931203712377"));
    }

    @Test
    public void testLowRangeLimit() {
        assertEquals(1, binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "4940970000000000=291912931203712377"));
    }

    @Test
    public void testHighRangeLimit() {
        assertEquals(1, binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "4940979999999999=291912931203712377"));
    }

    @Test
    public void test19DigitPan() {
        assertEquals(1, binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "4940979999999999999=291912931203712377"));
    }

    @Test
    public void testNoMatchLongPan() {
        assertEquals(-1, binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "9999999999999999999=291912931203712377"));
    }

    @Test
    public void testStartsWithZero() {
        assertEquals(-1, binRangesCfg.searchBinRanges(mockPayCfg, binRanges, "0999999999999999999=291912931203712377"));
    }
}