package eft.com.eftcore;

import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_047_ADDITIONAL_DATA_NATIONAL;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_055_ICC_DATA;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_057_CASH_AMOUNT;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_060_ADDITIONAL_PRIVATE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_064_MAC;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_070_NMIC;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_071_MESSAGE_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_118_CASHOUTS_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_119_CASHOUTS_AMOUNT;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till.Bit.DE_128_MAC;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._003_PROC_CODE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._004_TRAN_AMOUNT;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._007_TRAN_DATE_TIME;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._011_SYS_TRACE_AUDIT_NUM;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._012_LOCAL_TRAN_TIME;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._013_LOCAL_TRAN_DATE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._015_SETTLEMENT_DATE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._022_POS_ENTRY_MODE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._023_CARD_SEQUENCE_NUM;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._025_POS_CONDITION_CODE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._032_ACQUIRING_INST_ID_CODE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._035_TRACK_2_DATA;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._037_RETRIEVAL_REF_NUM;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._038_AUTH_ID_RESPONSE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._039_RESPONSE_CODE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._041_CARD_ACCEPTOR_TERMINAL_ID;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._042_CARD_ACCEPTOR_ID_CODE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._043_CARD_ACCEPTOR_NAME_LOCATION;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._048_ADDITIONAL_DATA;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._049_TRAN_CURRENCY_CODE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._052_PIN_DATA;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._053_SECURITY_RELATED_CONTROL_INFORMATION;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._074_CREDITS_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._075_CREDITS_REVERSAL_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._076_DEBITS_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._077_DEBITS_REVERSAL_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._078_TRANSFER_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._079_TRANSFER_REVERSAL_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._080_INQUIRIES_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._081_AUTHORISATIONS_NUMBER;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._086_CREDITS_AMOUNT;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._087_CREDITS_REVERSAL_AMOUNT;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._088_DEBITS_AMOUNT;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._089_DEBITS_REVERSAL_AMOUNT;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._090_ORIGINAL_DATA_ELEMENTS;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._091_FILE_UPDATE_CODE;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._097_AMOUNT_NET_SETTLEMENT;
import static com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583.Bit._101_FILE_NAME;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import com.linkly.libengine.engine.protocol.iso8583.openisoj.As2805Till;
import com.linkly.libengine.engine.protocol.iso8583.openisoj.Iso8583;

import org.junit.Test;

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
 */
public class As2805TillTests {
    private static final String TAG = "As2805TillTests";

    //
    //    @Test
    //    public void test0200PurchaseFuelCardPack() {
    //        try {
    //
    //            As2805Till msg = new As2805Till();
    //
    //            msg.setMsgType(Iso8583.MsgType._0200_TRAN_REQ);
    //            msg.set(_003_PROC_CODE, "003000" );
    //            msg.set(_004_TRAN_AMOUNT, "000000000900" );
    //            msg.set(_011_SYS_TRACE_AUDIT_NUM, "022262");
    //            //msg.set(_014_EXPIRATION_DATE, "2012" );
    //            msg.set(_022_POS_ENTRY_MODE, "021" );
    //            //msg.set(_023_CARD_SEQUENCE_NUM, "001" );
    //            //msg.set(_024_NII, "152" );
    //            msg.set(_025_POS_CONDITION_CODE, "04" );
    //            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
    //            //msg.set(_035_TRACK_2_DATA, "2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a2a" );
    //            msg.set(_035_TRACK_2_DATA, "4000000000000002D20120129831209388123" );
    //            msg.set(_037_RETRIEVAL_REF_NUM, "000000002373" );
    //            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "F2773051");
    //            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "611000602002773");
    //            msg.set(_047_ADDITIONAL_DATA_NATIONAL, "TOK70713480063302961999\\" );
    //            msg.set(_049_TRAN_CURRENCY_CODE, "036" );
    //            msg.set(_052_PIN_DATA, "2a2a2a2a2a2a2a2a" );
    //            //msg.set(_054_ADDITIONAL_AMOUNTS, "109127319203" );
    //            //msg.set(_055_ICC_DATA,
    //            "5F2A02003682023900950500000480009A032009059C01099F02060000000215989F03060000000200009F10200FA501A800F9000000000000000000000F7100000000000000000000000000009F1A0200369F26089CA070CC4826ADDD9F2701809F3303E0F8C89F34030200009F3501229F360200059F37042561AF4E9F420200368406A000000384205F28020036" );
    //            msg.set(_057_CASH_AMOUNT, "000000000000");
    //            msg.set(_060_ADDITIONAL_PRIVATE, "0");
    //            msg.set(_063_ADDITIONAL_PRIVATE, "BSK023PRD017PID00213AMT003900");
    //            msg.set(_064_MAC, "3EE0521900000000");
    //
    //            byte[] actual = msg.toMsg();
    //            byte[] expected = {
    //                    0x02,0x00,0x30,0x20,0x04,(byte)0x81,0x28,(byte)0xc2,(byte)0x90,(byte)0x93,
    //                    0x00,0x30,0x00,0x00,0x00,0x00,0x00,0x09,0x00,0x02,
    //                    0x22,0x62,0x00,0x21,0x04,0x31,0x31,0x00,0x06,0x28,
    //                    0x00,0x00,0x0f,0x33,0x37,0x40,0x00,0x00,0x00,0x00,
    //                    0x00,0x00,0x02,(byte)0xD2,0x01,0x20,0x12,(byte)0x98,0x31,0x20,
    //                    (byte)0x93,(byte)0x88,0x12,0x3F,0x30,0x30,0x30,0x30,0x30,0x30,
    //                    0x30,0x30,0x32,0x33,0x37,0x33,0x46,0x32,0x37,0x37,
    //                    0x33,0x30,0x35,0x31,0x36,0x31,0x31,0x30,0x30,0x30,
    //                    0x36,0x30,0x32,0x30,0x30,0x32,0x37,0x37,0x33,0x30,
    //                    0x30,0x36,0x54,0x43,0x43,0x30,0x37,0x5c,0x00,0x36,
    //                    0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x2a,0x00,0x00,
    //                    0x00,0x00,0x00,0x00,0x30,0x30,0x31,0x30,0x30,0x32,
    //                    0x39,0x42,0x53,0x4b,0x30,0x32,0x33,0x50,0x52,0x44,
    //                    0x30,0x31,0x37,0x50,0x49,0x44,0x30,0x30,0x32,0x31,
    //                    0x33,0x41,0x4d,0x54,0x30,0x30,0x33,0x39,0x30,0x30,
    //                    0x3e,(byte)0xe0,0x52,0x19,0x00,0x00,0x00,0x00};
    //            assertArrayEquals(expected, actual);
    //
    //        } catch (IllegalArgumentException e) {
    //            throw e;
    //        } catch (Exception e) {
    //            throw new RuntimeException(e);
    //        }
    //    }

    @Test
    public void test0210FuelCardUnpack() {

        try {
            final byte[] inputData = {
                    0x02, 0x10, 0x30, 0x3a, 0x00, 0x01, 0x02, (byte) 0xc2, (byte) 0x80, 0x01,
                    0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x02,
                    0x22, 0x62, 0x01, 0x57, 0x40, 0x10, 0x01, 0x10, 0x01, 0x11,
                    0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x30, 0x30, 0x46, 0x32,
                    0x37, 0x37, 0x33, 0x30, 0x35, 0x31, 0x36, 0x31, 0x31, 0x30,
                    0x30, 0x30, 0x36, 0x30, 0x32, 0x30, 0x30, 0x32, 0x37, 0x37,
                    0x33, 0x30, 0x32, 0x34, 0x54, 0x4f, 0x4b, 0x37, 0x30, 0x37,
                    0x31, 0x33, 0x34, 0x38, 0x30, 0x30, 0x36, 0x33, 0x33, 0x30,
                    0x32, 0x39, 0x36, 0x31, 0x39, 0x39, 0x39, 0x5c, 0x00, 0x36,
                    (byte) 0xf9, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00};
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0210_TRAN_REQ_RSP, msg.getMsgType());
            assertEquals("003000", msg.get(_003_PROC_CODE));
            assertEquals("000000000900", msg.get(_004_TRAN_AMOUNT));
            assertEquals("022262", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("015740", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("1001", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("1001", msg.get(_015_SETTLEMENT_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            //assertEquals( "002710238571", msg.get(_037_RETRIEVAL_REF_NUM));
            //assertEquals( "182370", msg.get(_038_AUTH_ID_RESPONSE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("F2773051", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("611000602002773", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("TOK70713480063302961999\\", msg.get(DE_047_ADDITIONAL_DATA_NATIONAL));
            assertEquals("036", msg.get(_049_TRAN_CURRENCY_CODE));
            //assertEquals( "91088FEE5E0400820000", msg.get(_055_ICC_DATA));
            //assertEquals( "tms/nm flags", msg.get(_060_ADDITIONAL_PRIVATE));
            assertEquals("F94E080000000000", msg.get(DE_064_MAC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0200PurchaseByInsertPack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0200_TRAN_REQ);
            msg.set(_003_PROC_CODE, "092000");
            msg.set(_004_TRAN_AMOUNT, "000000021598");
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "074890");
            //msg.set(_014_EXPIRATION_DATE, "2012" );
            msg.set(_022_POS_ENTRY_MODE, "051");
            msg.set(_023_CARD_SEQUENCE_NUM, "001");
            //msg.set(_024_NII, "152" );
            msg.set(_025_POS_CONDITION_CODE, "04");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_035_TRACK_2_DATA, "4000000000000002D20120129831209388123");
            msg.set(_037_RETRIEVAL_REF_NUM, "000000006372");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "W1864005");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "611000602001864");
            msg.set(DE_047_ADDITIONAL_DATA_NATIONAL, "TCC07\\");
            msg.set(_049_TRAN_CURRENCY_CODE, "036");
            msg.set(_052_PIN_DATA, "2A2A2A2A2A2A2A2A");
            //msg.set(_054_ADDITIONAL_AMOUNTS, "109127319203" );
            msg.set(DE_055_ICC_DATA,
                    "5F2A02003682023900950500000480009A032009059C01099F02060000000215989F03060000000200009F10200FA501A800F9000000000000000000000F7100000000000000000000000000009F1A0200369F26089CA070CC4826ADDD9F2701809F3303E0F8C89F34030200009F3501229F360200059F37042561AF4E9F420200368406A000000384205F28020036");
            msg.set(DE_057_CASH_AMOUNT, "000000020000");
            msg.set(DE_060_ADDITIONAL_PRIVATE, "0");
            msg.set(DE_064_MAC, "59B4655A00000000");

            byte[] actual = msg.toMsg();
            byte[] expected = {0x02, 0x00, 0x30, 0x20, 0x06, (byte) 0x81, 0x28, (byte) 0xc2, (byte) 0x92, (byte) 0x91, 0x09, 0x20, 0x00, 0x00, 0x00, 0x00,
                    0x02, 0x15, (byte) 0x98, 0x07, 0x48, (byte) 0x90, 0x00, 0x51, 0x00, 0x01, 0x04, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f,
                    0x37, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, (byte) 0xD2, 0x01, 0x20, 0x12, (byte) 0x98, 0x31, 0x20, (byte) 0x93, (byte) 0x88, 0x12, 0x3F,
                    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x36, 0x33, 0x37, 0x32, 0x57, 0x31, 0x38, 0x36, 0x34, 0x30, 0x30, 0x35, 0x36,
                    0x31, 0x31, 0x30, 0x30, 0x30, 0x36, 0x30, 0x32, 0x30, 0x30, 0x31, 0x38, 0x36, 0x34, 0x30, 0x30, 0x36, 0x54, 0x43, 0x43, 0x30,
                    0x37, 0x5c, 0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x01, 0x43, 0x5f, 0x2a, 0x02, 0x00, 0x36, (byte) 0x82,
                    0x02, 0x39, 0x00, (byte) 0x95, 0x05, 0x00, 0x00, 0x04, (byte) 0x80, 0x00, (byte) 0x9a, 0x03, 0x20, 0x09, 0x05, (byte) 0x9c,
                    0x01, 0x09, (byte) 0x9f, 0x02, 0x06, 0x00, 0x00, 0x00, 0x02, 0x15, (byte) 0x98, (byte) 0x9f, 0x03, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00,
                    0x00, (byte) 0x9f, 0x10, 0x20, 0x0f, (byte) 0xa5, 0x01, (byte) 0xa8, 0x00, (byte) 0xf9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x0f, (byte) 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x9f, 0x1a,
                    0x02, 0x00, 0x36, (byte) 0x9f, 0x26, 0x08, (byte) 0x9c, (byte) 0xa0, (byte) 0x70, (byte) 0xcc, 0x48, 0x26, (byte) 0xad, (byte) 0xdd,
                    (byte) 0x9f, 0x27, 0x01, (byte) 0x80, (byte) 0x9f, 0x33, 0x03, (byte) 0xe0, (byte) 0xf8, (byte) 0xc8, (byte) 0x9f, 0x34, 0x03, 0x02,
                    0x00, 0x00, (byte) 0x9f, 0x35, 0x01, 0x22, (byte) 0x9f, 0x36, 0x02, 0x00, 0x05, (byte) 0x9f, 0x37, 0x04, 0x25, 0x61, (byte) 0xaf, 0x4e,
                    (byte) 0x9f, 0x42, 0x02, 0x00, 0x36, (byte) 0x84, 0x06, (byte) 0xa0, 0x00, 0x00, 0x03, (byte) 0x84, 0x20, 0x5f, 0x28, 0x02, 0x00, 0x36,
                    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x30, 0x30, 0x31, 0x30, 0x59, (byte) 0xb4, 0x65, 0x5a, 0x00, 0x00, 0x00, 0x00};
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0200PurchaseByTapPack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0200_TRAN_REQ);
            msg.set(_003_PROC_CODE, "003000");
            msg.set(_004_TRAN_AMOUNT, "000000002000");
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "022264");
            //msg.set(_014_EXPIRATION_DATE, "2012" );
            msg.set(_022_POS_ENTRY_MODE, "071");
            msg.set(_023_CARD_SEQUENCE_NUM, "011");
            //msg.set(_024_NII, "152" );
            msg.set(_025_POS_CONDITION_CODE, "04");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_035_TRACK_2_DATA, "4000000000000002D20120129831209388123");
            msg.set(_037_RETRIEVAL_REF_NUM, "000000002376");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "F2773051");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "611000602002773");
            msg.set(DE_047_ADDITIONAL_DATA_NATIONAL, "TCC07\\");
            msg.set(_049_TRAN_CURRENCY_CODE, "036");
            msg.set(_052_PIN_DATA, "2A2A2A2A2A2A2A2A");
            //msg.set(_054_ADDITIONAL_AMOUNTS, "109127319203" );
            msg.set(DE_055_ICC_DATA,
                    "5f2a02003682020000950500000000009a031610019c01009f02060000000020009f03060000000000009f100706011103a000009f1a0200369f2608ea9308c1bbc97fab9f2701809f33030060409f34031f00009f3501229f360207939f3704065747bd9f6e04207000008407a00000000310109f660436804000");
            msg.set(DE_057_CASH_AMOUNT, "000000000000");
            msg.set(DE_060_ADDITIONAL_PRIVATE, "0");
            msg.set(DE_064_MAC, "3C89DA9E00000000");

            byte[] actual = msg.toMsg();
            byte[] expected = {
                    0x02, 0x00, 0x30, 0x20, 0x06, (byte) 0x81, 0x28, (byte) 0xc2, (byte) 0x92, (byte) 0x91,
                    0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02,
                    0x22, 0x64, 0x00, 0x71, 0x00, 0x11, 0x04, 0x11, 0x00, 0x06,
                    0x28, 0x00, 0x00, 0x0f, 0x37, 0x40, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x02, (byte) 0xD2, 0x01, 0x20, 0x12, (byte) 0x98,
                    0x31, 0x20, (byte) 0x93, (byte) 0x88, 0x12, 0x3F, 0x30, 0x30, 0x30, 0x30,
                    0x30, 0x30, 0x30, 0x30, 0x32, 0x33, 0x37, 0x36, 0x46, 0x32,
                    0x37, 0x37, 0x33, 0x30, 0x35, 0x31, 0x36, 0x31, 0x31, 0x30,
                    0x30, 0x30, 0x36, 0x30, 0x32, 0x30, 0x30, 0x32, 0x37, 0x37,
                    0x33, 0x30, 0x30, 0x36, 0x54, 0x43, 0x43, 0x30, 0x37, 0x5c,
                    0x00, 0x36, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a, 0x2a,
                    0x01, 0x23, 0x5f, 0x2a, 0x02, 0x00, 0x36, (byte) 0x82, 0x02,
                    0x00, 0x00, (byte) 0x95, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x9a,
                    0x03, 0x16, 0x10, 0x01, (byte) 0x9c, 0x01, 0x00, (byte) 0x9f, 0x02, 0x06,
                    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, (byte) 0x9f, 0x03, 0x06, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x9f, 0x10, 0x07, 0x06, 0x01,
                    0x11, 0x03, (byte) 0xa0, 0x00, 0x00, (byte) 0x9f, 0x1a, 0x02, 0x00, 0x36,
                    (byte) 0x9f, 0x26, 0x08, (byte) 0xea, (byte) 0x93, 0x08, (byte) 0xc1, (byte) 0xbb, (byte) 0xc9, 0x7f,
                    (byte) 0xab, (byte) 0x9f, 0x27, 0x01, (byte) 0x80, (byte) 0x9f, 0x33, 0x03, 0x00, 0x60,
                    0x40, (byte) 0x9f, 0x34, 0x03, 0x1f, 0x00, 0x00, (byte) 0x9f, 0x35, 0x01,
                    0x22, (byte) 0x9f, 0x36, 0x02, 0x07, (byte) 0x93, (byte) 0x9f, 0x37, 0x04, 0x06,
                    0x57, 0x47, (byte) 0xbd, (byte) 0x9f, 0x6e, 0x04, 0x20, 0x70, 0x00, 0x00,
                    (byte) 0x84, 0x07, (byte) 0xa0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10, (byte) 0x9f,
                    0x66, 0x04, 0x36, (byte) 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x30, 0x30, 0x31, 0x30, 0x3c, (byte) 0x89, (byte) 0xda, (byte) 0x9e,
                    0x00, 0x00, 0x00, 0x00};
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    @Test
    public void test0210Unpack() {

        try {
            final byte[] inputData = {0x02, 0x10, 0x30, 0x3a, 0x00, 0x01, 0x02, (byte) 0xc2, (byte) 0x82, 0x01, 0x09, 0x20, 0x00, 0x00, 0x00, 0x00, 0x02, 0x15, (byte) 0x98,
                    0x07, 0x48, (byte) 0x90, 0x10, 0x31, 0x45, 0x09, 0x05, 0x09, 0x05, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x37, 0x36, 0x57, 0x31,
                    0x38, 0x36, 0x34, 0x30, 0x30, 0x35, 0x36, 0x31, 0x31, 0x30, 0x30, 0x30, 0x36, 0x30, 0x32, 0x30, 0x30, 0x31, 0x38, 0x36, 0x34, 0x30, 0x32,
                    0x34, 0x54, 0x4f, 0x4b, 0x35, 0x31, 0x36, 0x33, 0x36, 0x31, 0x38, 0x30, 0x30, 0x30, 0x30, 0x33, 0x33, 0x37, 0x34, 0x34, 0x30, 0x30, 0x35, 0x38,
                    0x5c, 0x00, 0x36, 0x00, 0x10, (byte) 0x91, 0x08, (byte) 0x8f, (byte) 0xee, 0x5e, 0x04, 0x00, (byte) 0x82, 0x00, 0x00, 0x1e, (byte) 0xed,
                    0x12, 0x03, 0x00, 0x00, 0x00, 0x00};
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0210_TRAN_REQ_RSP, msg.getMsgType());
            assertEquals("092000", msg.get(_003_PROC_CODE));
            assertEquals("000000021598", msg.get(_004_TRAN_AMOUNT));
            assertEquals("074890", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("103145", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("0905", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("0905", msg.get(_015_SETTLEMENT_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            //assertEquals( "002710238571", msg.get(_037_RETRIEVAL_REF_NUM));
            //assertEquals( "182370", msg.get(_038_AUTH_ID_RESPONSE));
            assertEquals("76", msg.get(_039_RESPONSE_CODE));
            assertEquals("W1864005", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("611000602001864", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("TOK51636180000337440058\\", msg.get(DE_047_ADDITIONAL_DATA_NATIONAL));
            assertEquals("036", msg.get(_049_TRAN_CURRENCY_CODE));
            assertEquals("91088FEE5E0400820000", msg.get(DE_055_ICC_DATA));
            //assertEquals( "tms/nm flags", msg.get(_060_ADDITIONAL_PRIVATE));
            assertEquals("1EED120300000000", msg.get(DE_064_MAC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    @Test
    public void test0220AdvicePack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0220_TRAN_ADV);
            msg.set(_003_PROC_CODE, "003000");
            msg.set(_004_TRAN_AMOUNT, "000000002000");
            msg.set(_007_TRAN_DATE_TIME, "1001020910");
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "024101");
            msg.set(_012_LOCAL_TRAN_TIME, "020726");
            msg.set(_013_LOCAL_TRAN_DATE, "1001");
            msg.set(_022_POS_ENTRY_MODE, "071");
            msg.set(_023_CARD_SEQUENCE_NUM, "011");
            msg.set(_025_POS_CONDITION_CODE, "04");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_035_TRACK_2_DATA, "4000000000000002D20120129831209388123");
            msg.set(_037_RETRIEVAL_REF_NUM, "000000002376");
            msg.set(_038_AUTH_ID_RESPONSE, "000000");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "F2773051");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "611000602002773");
            msg.set(DE_047_ADDITIONAL_DATA_NATIONAL, "FBKE\\TCC07\\");
            msg.set(_049_TRAN_CURRENCY_CODE, "036");
            msg.set(DE_055_ICC_DATA,
                    "5f2a02003682020000950500000000009a031610019c01009f02060000000020009f03060000000000009f100706011103a000009f1a0200369f2608ea9308c1bbc97fab9f2701809f33030060409f34031f00009f3501229f360207939f3704065747bd8a025a339f6e04207000008407a00000000310109f660436804000");
            msg.set(DE_057_CASH_AMOUNT, "000000000000");
            msg.set(DE_060_ADDITIONAL_PRIVATE, "0");
            msg.set(DE_064_MAC, "391E4F1D00000000");

            byte[] actual = msg.toMsg();
            byte[] expected = {
                    0x02, 0x20, 0x32, 0x38, 0x06, (byte) 0x81, 0x2c, (byte) 0xc2, (byte) 0x82, (byte) 0x91,
                    0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x10,
                    0x01, 0x02, 0x09, 0x10, 0x02, 0x41, 0x01, 0x02, 0x07, 0x26,
                    0x10, 0x01, 0x00, 0x71, 0x00, 0x11, 0x04, 0x11, 0x00, 0x06,
                    0x28, 0x00, 0x00, 0x0f, 0x37, 0x40, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x02, (byte) 0xD2, 0x01, 0x20, 0x12, (byte) 0x98,
                    0x31, 0x20, (byte) 0x93, (byte) 0x88, 0x12, 0x3F, 0x30, 0x30, 0x30, 0x30,
                    0x30, 0x30, 0x30, 0x30, 0x32, 0x33, 0x37, 0x36, 0x30, 0x30,
                    0x30, 0x30, 0x30, 0x30, 0x46, 0x32, 0x37, 0x37, 0x33, 0x30,
                    0x35, 0x31, 0x36, 0x31, 0x31, 0x30, 0x30, 0x30, 0x36, 0x30,
                    0x32, 0x30, 0x30, 0x32, 0x37, 0x37, 0x33, 0x30, 0x31, 0x31,
                    0x46, 0x42, 0x4b, 0x45, 0x5c, 0x54, 0x43, 0x43, 0x30, 0x37,
                    0x5c, 0x00, 0x36, 0x01, 0x27, 0x5f, 0x2a, 0x02, 0x00,
                    0x36, (byte) 0x82, 0x02, 0x00, 0x00, (byte) 0x95, 0x05, 0x00, 0x00, 0x00,
                    0x00, 0x00, (byte) 0x9a, 0x03, 0x16, 0x10, 0x01, (byte) 0x9c, 0x01, 0x00,
                    (byte) 0x9f, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, (byte) 0x9f,
                    0x03, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x9f, 0x10,
                    0x07, 0x06, 0x01, 0x11, 0x03, (byte) 0xa0, 0x00, 0x00, (byte) 0x9f, 0x1a,
                    0x02, 0x00, 0x36, (byte) 0x9f, 0x26, 0x08, (byte) 0xea, (byte) 0x93, 0x08, (byte) 0xc1,
                    (byte) 0xbb, (byte) 0xc9, 0x7f, (byte) 0xab, (byte) 0x9f, 0x27, 0x01, (byte) 0x80, (byte) 0x9f, 0x33,
                    0x03, 0x00, 0x60, 0x40, (byte) 0x9f, 0x34, 0x03, 0x1f, 0x00, 0x00,
                    (byte) 0x9f, 0x35, 0x01, 0x22, (byte) 0x9f, 0x36, 0x02, 0x07, (byte) 0x93, (byte) 0x9f,
                    0x37, 0x04, 0x06, 0x57, 0x47, (byte) 0xbd, (byte) 0x8a, 0x02, 0x5a, 0x33,
                    (byte) 0x9f, 0x6e, 0x04, 0x20, 0x70, 0x00, 0x00, (byte) 0x84, 0x07, (byte) 0xa0,
                    0x00, 0x00, 0x00, 0x03, 0x10, 0x10, (byte) 0x9f, 0x66, 0x04, 0x36,
                    (byte) 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
                    0x30, 0x31, 0x30, 0x39, 0x1e, 0x4f, 0x1d, 0x00, 0x00, 0x00,
                    0x00};
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0230AdviceUnpack() {

        try {
            final byte[] inputData = {
                    0x02, 0x30, 0x30, 0x3a, 0x00, 0x01, 0x0a, (byte) 0xc2, (byte) 0x80, 0x01,
                    0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02,
                    0x41, 0x01, 0x02, 0x07, 0x26, 0x10, 0x01, 0x10, 0x01, 0x11,
                    0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x30, 0x30, 0x30, 0x30,
                    0x30, 0x30, 0x30, 0x30, 0x32, 0x33, 0x37, 0x36, 0x30, 0x30,
                    0x46, 0x32, 0x37, 0x37, 0x33, 0x30, 0x35, 0x31, 0x36, 0x31,
                    0x31, 0x30, 0x30, 0x30, 0x36, 0x30, 0x32, 0x30, 0x30, 0x32,
                    0x37, 0x37, 0x33, 0x30, 0x32, 0x34, 0x54, 0x4f, 0x4b, 0x34,
                    0x33, 0x36, 0x33, 0x38, 0x34, 0x38, 0x38, 0x39, 0x39, 0x39,
                    0x39, 0x37, 0x34, 0x32, 0x38, 0x35, 0x39, 0x39, 0x39, 0x5c,
                    0x00, 0x36, 0x3f, 0x01, 0x26, (byte) 0x95, 0x00, 0x00,
                    0x00, 0x00};
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0230_TRAN_ADV_RSP, msg.getMsgType());
            assertEquals("003000", msg.get(_003_PROC_CODE));
            assertEquals("000000002000", msg.get(_004_TRAN_AMOUNT));
            assertEquals("024101", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("020726", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("1001", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("1001", msg.get(_015_SETTLEMENT_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            assertEquals("000000002376", msg.get(_037_RETRIEVAL_REF_NUM));
            //assertEquals( "182370", msg.get(_038_AUTH_ID_RESPONSE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("F2773051", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("611000602002773", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("TOK43638488999974285999\\", msg.get(DE_047_ADDITIONAL_DATA_NATIONAL));
            assertEquals("036", msg.get(_049_TRAN_CURRENCY_CODE));
            //assertEquals( "91088FEE5E0400820000", msg.get(_055_ICC_DATA));
            //assertEquals( "tms/nm flags", msg.get(_060_ADDITIONAL_PRIVATE));
            assertEquals("3F01269500000000", msg.get(DE_064_MAC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0300Pack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0300_ACQUIRER_FILE_UPDATE_REQ);
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "024090");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "F2773051");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "611000602002773");
            msg.set(_048_ADDITIONAL_DATA, "0001");
            //msg.set(_060_ADDITIONAL_PRIVATE, "s/w vers 1234");
            msg.set(DE_070_NMIC, "151");
            msg.set(DE_071_MESSAGE_NUMBER, "0001");
            msg.set(_091_FILE_UPDATE_CODE, "4");
            msg.set(_101_FILE_NAME, "EPAT");
            msg.set(DE_128_MAC, "7F2FB19000000000");

            byte[] actual = msg.toMsg();
            byte[] expected = {
                    0x03, 0x00, (byte) 0x80, 0x20, 0x00, 0x01, 0x00, (byte) 0xc1, 0x00, 0x00,
                    0x06, 0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x01, 0x02, 0x40,
                    (byte) 0x90, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x46,
                    0x32, 0x37, 0x37, 0x33, 0x30, 0x35, 0x31, 0x36, 0x31, 0x31,
                    0x30, 0x30, 0x30, 0x36, 0x30, 0x32, 0x30, 0x30, 0x32, 0x37,
                    0x37, 0x33, 0x30, 0x30, 0x32, 0x00, 0x01, 0x01, 0x51, 0x00,
                    0x01, 0x34, 0x30, 0x34, 0x45, 0x50, 0x41, 0x54, 0x7f, 0x2f,
                    (byte) 0xb1, (byte) 0x90, 0x00, 0x00, 0x00, 0x00};
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0310Unpack() {
        try {
            final byte[] inputData = {
                    0x03, 0x10, (byte) 0x80, 0x38, 0x00, 0x01, 0x02, (byte) 0xc1, 0x00, 0x00,
                    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x40,
                    (byte) 0x90, 0x02, 0x08, 0x24, 0x10, 0x01, 0x11, 0x00, 0x06,
                    0x28, 0x00, 0x00, 0x0f, 0x30, 0x30, 0x46, 0x32, 0x37, 0x37,
                    0x33, 0x30, 0x35, 0x31, 0x36, 0x31, 0x31, 0x30, 0x30, 0x30,
                    0x36, 0x30, 0x32, 0x30, 0x30, 0x32, 0x37, 0x37, 0x33, 0x35,
                    0x31, 0x32, 0x47, 0x13, 0x00, 0x00, 0x05, 0x06, (byte) 0xdf, (byte) 0xe9,
                    0x58, 0x03, 0x10, 0x01, (byte) 0x99, (byte) 0xff, (byte) 0xe9, 0x13, 0x36, (byte) 0xff,
                    (byte) 0xe9, 0x1e, 0x32, (byte) 0x81, 0x04, 0x00, 0x00, 0x00, 0x00, (byte) 0x9f,
                    0x04, 0x04, 0x00, 0x00, 0x00, 0x00, (byte) 0x9f, 0x15, 0x02, 0x54,
                    0x11, (byte) 0x9f, 0x1a, 0x02, 0x00, 0x36, (byte) 0x9f, 0x33, 0x03, (byte) 0xe0,
                    (byte) 0xf8, (byte) 0xc8, (byte) 0x9f, 0x35, 0x01, 0x22, (byte) 0x9f, 0x3c, 0x02, 0x00,
                    0x36, (byte) 0x9f, 0x3d, 0x01, 0x02, (byte) 0x9f, 0x40, 0x05, (byte) 0xff, (byte) 0x80,
                    (byte) 0xf0, (byte) 0xa0, 0x01, (byte) 0xff, (byte) 0xe9, 0x10, (byte) 0x82, 0x01, 0x5b, (byte) 0xdf,
                    (byte) 0xe9, 0x14, 0x07, (byte) 0xa0, 0x00, 0x00, 0x00, 0x03, 0x10, 0x10,
                    (byte) 0xdf, (byte) 0xe9, 0x5d, 0x10, 0x56, 0x69, 0x73, 0x61, 0x20, 0x20,
                    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                    (byte) 0xdf, (byte) 0xe9, 0x1f, 0x01, 0x01, (byte) 0xdf, (byte) 0xe9, 0x20, 0x01, 0x01,
                    (byte) 0xff, (byte) 0xe9, 0x15, (byte) 0x81, (byte) 0x94, (byte) 0xdf, (byte) 0xe9, 0x16, 0x01, 0x04,
                    (byte) 0xff, (byte) 0xe9, 0x17, (byte) 0x81, (byte) 0x8a, 0x1f, 0x03, 0x05, (byte) 0xdc, 0x40,
                    0x00, (byte) 0xa8, 0x00, 0x1f, 0x04, 0x05, 0x00, 0x10, 0x00, 0x00,
                    0x00, 0x1f, 0x05, 0x05, (byte) 0xdc, 0x40, 0x04, (byte) 0xf8, 0x00, (byte) 0x9f,
                    (byte) 0xe9, 0x51, 0x05, (byte) 0xfc, 0x70, 0x20, 0x00, 0x00, 0x1f, 0x07,
                    0x04, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x08, 0x01, 0x00, 0x1f,
                    0x09, 0x01, 0x00, 0x1f, 0x15, 0x03, (byte) 0x9f, 0x37, 0x04, 0x1f,
                    0x18, 0x0f, (byte) 0x9f, 0x02, 0x06, 0x5f, 0x2a, 0x02, (byte) 0x9a, 0x03,
                    (byte) 0x9c, 0x01, (byte) 0x95, 0x05, (byte) 0x9f, 0x37, 0x04, (byte) 0x9c, 0x01, 0x00,
                    (byte) 0x9f, 0x09, 0x02, 0x00, (byte) 0x8c, (byte) 0x9f, 0x1b, 0x04, 0x00, 0x00,
                    0x00, 0x01, (byte) 0x9f, 0x53, 0x01, 0x52, (byte) 0x9f, (byte) 0xe9, 0x52, 0x04,
                    0x00, 0x00, 0x00, 0x5a, (byte) 0x9f, (byte) 0xe9, 0x53, 0x01, 0x01, (byte) 0x9f,
                    (byte) 0xe9, 0x54, 0x03, (byte) 0xe0, 0x08, (byte) 0xc8, (byte) 0xdf, (byte) 0xe9, 0x45, 0x01,
                    0x01, (byte) 0xdf, (byte) 0xe9, 0x26, 0x03, (byte) 0xe0, (byte) 0xf8, (byte) 0xc8, (byte) 0x9f, 0x40,
                    0x05, (byte) 0xff, (byte) 0x80, (byte) 0xf0, (byte) 0xa0, 0x01, (byte) 0x9f, 0x66, 0x04, 0x00,
                    0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xe9, 0x15, (byte) 0x81, (byte) 0x94, (byte) 0xdf, (byte) 0xe9,
                    0x16, 0x01, 0x00, (byte) 0xff, (byte) 0xe9, 0x17, (byte) 0x81, (byte) 0x8a, 0x1f, 0x03,
                    0x05, (byte) 0xdc, 0x40, 0x00, (byte) 0xa8, 0x00, 0x1f, 0x04, 0x05, 0x00,
                    0x10, 0x00, 0x00, 0x00, 0x1f, 0x05, 0x05, (byte) 0xdc, 0x40, 0x04,
                    (byte) 0xf8, 0x00, (byte) 0x9f, (byte) 0xe9, 0x51, 0x05, (byte) 0xfc, 0x70, 0x20, 0x00,
                    0x00, 0x1f, 0x07, 0x04, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x08,
                    0x01, 0x00, 0x1f, 0x09, 0x01, 0x00, 0x1f, 0x15, 0x03, (byte) 0x9f,
                    0x37, 0x04, 0x1f, 0x18, 0x0f, (byte) 0x9f, 0x02, 0x06, 0x5f, 0x2a,
                    0x02, (byte) 0x9a, 0x03, (byte) 0x9c, 0x01, (byte) 0x95, 0x05, (byte) 0x9f, 0x37, 0x04,
                    (byte) 0x9c, 0x01, 0x00, (byte) 0x9f, 0x09, 0x02, 0x00, (byte) 0x8c, (byte) 0x9f, 0x1b,
                    0x04, 0x00, 0x00, 0x00, 0x01, (byte) 0x9f, 0x53, 0x01, 0x52, (byte) 0x9f,
                    (byte) 0xe9, 0x52, 0x04, 0x00, 0x00, 0x00, 0x5a, (byte) 0x9f, (byte) 0xe9, 0x53,
                    0x01, 0x01, (byte) 0x9f, (byte) 0xe9, 0x54, 0x03, (byte) 0xe0, 0x08, (byte) 0xc8, (byte) 0xdf,
                    (byte) 0xe9, 0x45, 0x01, 0x01, (byte) 0xdf, (byte) 0xe9, 0x26, 0x03, (byte) 0xe0, (byte) 0xf8,
                    (byte) 0xc8, (byte) 0x9f, 0x40, 0x05, (byte) 0xff, (byte) 0x80, (byte) 0xf0, (byte) 0xa0, 0x01, (byte) 0x9f,
                    0x66, 0x04, 0x00, 0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xe9, 0x10, (byte) 0x82,
                    0x01, 0x5b, (byte) 0xdf, (byte) 0xe9, 0x14, 0x07, (byte) 0xa0, 0x00, 0x00, 0x00,
                    0x04, 0x10, 0x10, (byte) 0xdf, (byte) 0xe9, 0x5d, 0x10, 0x4d, 0x61, 0x73,
                    0x74, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x20, 0x20, 0x20,
                    0x20, 0x20, 0x20, (byte) 0xdf, (byte) 0xe9, 0x1f, 0x01, 0x01, (byte) 0xdf, (byte) 0xe9,
                    0x20, 0x01, 0x01, (byte) 0xff, (byte) 0xe9, 0x15, (byte) 0x81, (byte) 0x94, (byte) 0xdf, (byte) 0xe9,
                    0x16, 0x01, 0x04, (byte) 0xff, (byte) 0xe9, 0x17, (byte) 0x81, (byte) 0x8a, 0x1f, 0x03,
                    0x05, (byte) 0xdc, 0x50, (byte) 0xfc, (byte) 0x98, 0x00, 0x1f, 0x04, 0x05, 0x00,
                    0x10, 0x00, 0x00, 0x00, 0x1f, 0x05, 0x05, (byte) 0xde, 0x00, (byte) 0xfc,
                    (byte) 0x98, 0x00, (byte) 0x9f, (byte) 0xe9, 0x01, 0x51, 0x00, 0x01, 0x60, 0x6c,
                    (byte) 0xca, 0x13, 0x00, 0x00, 0x00, 0x00};
            As2805Till msg = new As2805Till(inputData);

            assertEquals("024090", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("020824", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("1001", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("F2773051", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("611000602002773", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals(
                    "471300000506dfe95803100199ffe91336ffe91e328104000000009f0404000000009f150254119f1a0200369f3303e0f8c89f3501229f3c0200369f3d01029f4005ff80f0a001ffe91082015bdfe91407a0000000031010dfe95d1056697361202020202020202020202020dfe91f0101dfe9200101ffe9158194dfe9160104ffe917818a1f0305dc4000a8001f040500100000001f0505dc4004f8009fe95105fc702000001f0704000000001f0801001f0901001f15039f37041f180f9f02065f2a029a039c0195059f37049c01009f0902008c9f1b04000000019f5301529fe952040000005a9fe95301019fe95403e008c8dfe9450101dfe92603e0f8c89f4005ff80f0a0019f660400000000ffe9158194dfe9160100ffe917818a1f0305dc4000a8001f040500100000001f0505dc4004f8009fe95105fc702000001f0704000000001f0801001f0901001f15039f37041f180f9f02065f2a029a039c0195059f37049c01009f0902008c9f1b04000000019f5301529fe952040000005a9fe95301019fe95403e008c8dfe9450101dfe92603e0f8c89f4005ff80f0a0019f660400000000ffe91082015bdfe91407a0000000041010dfe95d104d617374657243617264202020202020dfe91f0101dfe9200101ffe9158194dfe9160104ffe917818a1f0305dc50fc98001f040500100000001f0505de00fc98009fe9".toUpperCase(), msg.get(_048_ADDITIONAL_DATA));
            assertEquals("0001", msg.get(DE_071_MESSAGE_NUMBER));
            assertEquals("606CCA1300000000", msg.get(DE_128_MAC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    @Test
    public void test0421AdvicePack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0421_ACQUIRER_REV_ADV_REP);
            msg.set(_003_PROC_CODE, "003000");
            msg.set(_004_TRAN_AMOUNT, "000000002000");
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "022265");
            msg.set(_022_POS_ENTRY_MODE, "071");
            msg.set(_023_CARD_SEQUENCE_NUM, "011");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_035_TRACK_2_DATA, "4000000000000002D20120129831209388123");
            msg.set(_037_RETRIEVAL_REF_NUM, "000000002376");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "F2773051");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "611000602002773");
            msg.set(DE_047_ADDITIONAL_DATA_NATIONAL, "TCC07\\");
            msg.set(_049_TRAN_CURRENCY_CODE, "036");
            msg.set(DE_055_ICC_DATA,
                    "5f2a02003682020000950500000000009a031610019c01009f02060000000020009f03060000000000009f100706011103a000009f1a0200369f2608ea9308c1bbc97fab9f2701809f33030060409f34031f00009f3501229f360207939f3704065747bd9f660436804000");
            msg.set(DE_057_CASH_AMOUNT, "000000000000");
            msg.set(DE_060_ADDITIONAL_PRIVATE, "0");
            msg.set(_090_ORIGINAL_DATA_ELEMENTS, "020002226402072601100000000000000000000000");
            msg.set(DE_128_MAC, "712c456200000000");

            byte[] actual = msg.toMsg();
            byte[] expected = {
                    0x04, 0x21, (byte) 0xb0, 0x20, 0x06, 0x01, 0x28, (byte) 0xc2, (byte) 0x82, (byte) 0x90,
                    0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x30,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02, 0x22, 0x65,
                    0x00, 0x71, 0x00, 0x11, 0x11, 0x00, 0x06, 0x28, 0x00,
                    0x00, 0x0f, 0x37, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x02, (byte) 0xD2, 0x01, 0x20, 0x12, (byte) 0x98, 0x31, 0x20, (byte) 0x93,
                    (byte) 0x88, 0x12, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
                    0x30, 0x32, 0x33, 0x37, 0x36, 0x46, 0x32, 0x37, 0x37, 0x33,
                    0x30, 0x35, 0x31, 0x36, 0x31, 0x31, 0x30, 0x30, 0x30, 0x36,
                    0x30, 0x32, 0x30, 0x30, 0x32, 0x37, 0x37, 0x33, 0x30, 0x30,
                    0x36, 0x54, 0x43, 0x43, 0x30, 0x37, 0x5c, 0x00, 0x36, 0x01,
                    0x07, 0x5f, 0x2a, 0x02, 0x00, 0x36, (byte) 0x82, 0x02, 0x00,
                    0x00, (byte) 0x95, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x9a, 0x03,
                    0x16, 0x10, 0x01, (byte) 0x9c, 0x01, 0x00, (byte) 0x9f, 0x02, 0x06, 0x00,
                    0x00, 0x00, 0x00, 0x20, 0x00, (byte) 0x9f, 0x03, 0x06, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, (byte) 0x9f, 0x10, 0x07, 0x06, 0x01, 0x11,
                    0x03, (byte) 0xa0, 0x00, 0x00, (byte) 0x9f, 0x1a, 0x02, 0x00, 0x36, (byte) 0x9f,
                    0x26, 0x08, (byte) 0xea, (byte) 0x93, 0x08, (byte) 0xc1, (byte) 0xbb, (byte) 0xc9, 0x7f, (byte) 0xab,
                    (byte) 0x9f, 0x27, 0x01, (byte) 0x80, (byte) 0x9f, 0x33, 0x03, 0x00, 0x60, 0x40,
                    (byte) 0x9f, 0x34, 0x03, 0x1f, 0x00, 0x00, (byte) 0x9f, 0x35, 0x01, 0x22,
                    (byte) 0x9f, 0x36, 0x02, 0x07, (byte) 0x93, (byte) 0x9f, 0x37, 0x04, 0x06, 0x57,
                    0x47, (byte) 0xbd, (byte) 0x9f, 0x66, 0x04, 0x36, (byte) 0x80, 0x40, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x31, 0x30, 0x02,
                    0x00, 0x02, 0x22, 0x64, 0x02, 0x07, 0x26, 0x01, 0x10, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x71, 0x2c, 0x45, 0x62, 0x00, 0x00, 0x00, 0x00};
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0430AdviceUnpack() {

        try {
            final byte[] inputData = {
                    0x04, 0x30, 0x30, 0x22, 0x00, 0x01, 0x02, (byte) 0xc2, (byte) 0x80, 0x01,
                    0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x02,
                    0x22, 0x65, 0x10, 0x01, 0x11, 0x00, 0x06, 0x28, 0x00,
                    0x00, 0x0f, 0x30, 0x30, 0x46, 0x32, 0x37, 0x37, 0x33, 0x30,
                    0x35, 0x31, 0x36, 0x31, 0x31, 0x30, 0x30, 0x30, 0x36, 0x30,
                    0x32, 0x30, 0x30, 0x32, 0x37, 0x37, 0x33, 0x30, 0x32, 0x34,
                    0x54, 0x4f, 0x4b, 0x34, 0x33, 0x36, 0x33, 0x38, 0x34, 0x38,
                    0x38, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x32, 0x38, 0x35,
                    0x39, 0x39, 0x39, 0x5c, 0x00, 0x36, (byte) 0x89, (byte) 0xf9, 0x59, (byte) 0xe4,
                    0x00, 0x00, 0x00, 0x00};
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0430_ACQUIRER_REV_ADV_RSP, msg.getMsgType());
            assertEquals("003000", msg.get(_003_PROC_CODE));
            assertEquals("000000002000", msg.get(_004_TRAN_AMOUNT));
            assertEquals("022265", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            //assertEquals( "020726", msg.get(_012_LOCAL_TRAN_TIME));
            //assertEquals( "1001", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("1001", msg.get(_015_SETTLEMENT_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            //assertEquals( "000000002376", msg.get(_037_RETRIEVAL_REF_NUM));
            //assertEquals( "182370", msg.get(_038_AUTH_ID_RESPONSE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("F2773051", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("611000602002773", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("TOK43638488999974285999\\", msg.get(DE_047_ADDITIONAL_DATA_NATIONAL));
            assertEquals("036", msg.get(_049_TRAN_CURRENCY_CODE));
            //assertEquals( "91088FEE5E0400820000", msg.get(_055_ICC_DATA));
            //assertEquals( "tms/nm flags", msg.get(_060_ADDITIONAL_PRIVATE));
            assertEquals("89F959E400000000", msg.get(DE_064_MAC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    @Test
    public void test0500Pack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0500_ACQUIRER_RECONCILE_REQ);
            msg.set(_003_PROC_CODE, "960000");
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "024102");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "F2773051");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "611000602002773");
            msg.set(DE_064_MAC, "E69A0E1600000000");

            byte[] actual = msg.toMsg();
            byte[] expected = {
                    0x05, 0x00, 0x20, 0x20, 0x00, 0x01, 0x00, (byte) 0xc0, 0x00, 0x01,
                    (byte) 0x96, 0x00, 0x00, 0x02, 0x41, 0x02, 0x11, 0x00, 0x06,
                    0x28, 0x00, 0x00, 0x0f, 0x46, 0x32, 0x37, 0x37, 0x33, 0x30,
                    0x35, 0x31, 0x36, 0x31, 0x31, 0x30, 0x30, 0x30, 0x36, 0x30,
                    0x32, 0x30, 0x30, 0x32, 0x37, 0x37, 0x33, (byte) 0xe6, (byte) 0x9a, 0x0e,
                    0x16, 0x00, 0x00, 0x00, 0x00};
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    @SuppressWarnings("java:S5961") // just validating all the fields possible, can't be limited to the rule of max 25 assertions per UT
    public void test0510Unpack() {

        try {
            final byte[] inputData = {
                    0x05, 0x10, (byte) 0xa0, 0x3a, 0x00, 0x01, 0x02, (byte) 0xc1, 0x00, 0x00,
                    0x00, 0x7f, (byte) 0x87, (byte) 0x80, (byte) 0x80, 0x00, 0x06, 0x01, (byte) 0x96, 0x00,
                    0x00, 0x02, 0x41, 0x02, 0x02, 0x09, 0x42, 0x10, 0x01, 0x10,
                    0x01, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x30,
                    0x30, 0x46, 0x32, 0x37, 0x37, 0x33, 0x30, 0x35, 0x31, 0x36,
                    0x31, 0x31, 0x30, 0x30, 0x30, 0x36, 0x30, 0x32, 0x30, 0x30,
                    0x32, 0x37, 0x37, 0x33, 0x30, 0x35, 0x37, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x55, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x67, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, (byte) 0xf3,
                    0x63, (byte) 0x88, 0x00, 0x00, 0x00, 0x00};
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0510_ACQUIRER_RECONCILE_REQ_RSP, msg.getMsgType());
            assertEquals("960000", msg.get(_003_PROC_CODE));
            assertEquals("024102", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("020942", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("1001", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("1001", msg.get(_015_SETTLEMENT_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("F2773051", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("611000602002773", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("000000000000000000000001000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000", msg.get(_048_ADDITIONAL_DATA));

            assertEquals("0000000000", msg.get(_074_CREDITS_NUMBER));
            assertEquals("0000000000", msg.get(_075_CREDITS_REVERSAL_NUMBER));
            assertEquals("0000000009", msg.get(_076_DEBITS_NUMBER));
            assertEquals("0000000000", msg.get(_077_DEBITS_REVERSAL_NUMBER));
            assertEquals("0000000000", msg.get(_078_TRANSFER_NUMBER));
            assertEquals("0000000000", msg.get(_079_TRANSFER_REVERSAL_NUMBER));
            assertEquals("0000000000", msg.get(_080_INQUIRIES_NUMBER));
            assertEquals("0000000000", msg.get(_081_AUTHORISATIONS_NUMBER));

            assertEquals("0000000000000000", msg.get(_086_CREDITS_AMOUNT));
            assertEquals("0000000000000000", msg.get(_087_CREDITS_REVERSAL_AMOUNT));
            assertEquals("0000000000006755", msg.get(_088_DEBITS_AMOUNT));
            assertEquals("0000000000000000", msg.get(_089_DEBITS_REVERSAL_AMOUNT));
            assertEquals("430000000000006755", msg.get(_097_AMOUNT_NET_SETTLEMENT));
            assertEquals("0000000000", msg.get(DE_118_CASHOUTS_NUMBER));
            assertEquals("0000000000000000", msg.get(DE_119_CASHOUTS_AMOUNT));
            assertEquals("39F3638800000000", msg.get(DE_128_MAC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }


    @Test
    @SuppressWarnings("java:S5961") // just validating all the fields possible, can't be limited to the rule of max 25 assertions per UT
    public void test0610UnpackV2() {

        try {
            final byte[] inputData = {
                    (byte) 0x06, (byte) 0x10, (byte) 0xA0, (byte) 0x3A, (byte) 0x00, (byte) 0x01, (byte) 0x02, (byte) 0xC3, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x7F, (byte) 0x87, (byte) 0x80, (byte) 0x80, (byte) 0x00,
                    (byte) 0x06, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x88, (byte) 0x31, (byte) 0x21, (byte) 0x53, (byte) 0x57, (byte) 0x11, (byte) 0x02, (byte) 0x11, (byte) 0x02, (byte) 0x11,
                    (byte) 0x00, (byte) 0x06, (byte) 0x28, (byte) 0x00, (byte) 0x00, (byte) 0x0F, (byte) 0x30, (byte) 0x30, (byte) 0x57, (byte) 0x32, (byte) 0x37, (byte) 0x37, (byte) 0x33, (byte) 0x30, (byte) 0x34, (byte) 0x33,
                    (byte) 0x36, (byte) 0x31, (byte) 0x31, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x36, (byte) 0x30, (byte) 0x34, (byte) 0x30, (byte) 0x30, (byte) 0x32, (byte) 0x37, (byte) 0x37, (byte) 0x33, (byte) 0x30,
                    (byte) 0x32, (byte) 0x34, (byte) 0x54, (byte) 0x4F, (byte) 0x4B, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x38, (byte) 0x39, (byte) 0x39, (byte) 0x39, (byte) 0x39,
                    (byte) 0x39, (byte) 0x39, (byte) 0x39, (byte) 0x39, (byte) 0x39, (byte) 0x39, (byte) 0x39, (byte) 0x39, (byte) 0x39, (byte) 0x5C, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                    (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                    (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                    (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                    (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                    (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x20, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00,
                    (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xF7, (byte) 0xB1, (byte) 0xFC, (byte) 0x90, (byte) 0x00,
                    (byte) 0x00, (byte) 0x00, (byte) 0x00
            };

            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0610_ADMIN_REQ_RSP, msg.getMsgType());
            assertEquals("000000", msg.get(_003_PROC_CODE));
            assertEquals("018831", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("215357", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("1102", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("1102", msg.get(_015_SETTLEMENT_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("W2773043", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("611000604002773", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("TOK00000089999999999999\\", msg.get(DE_047_ADDITIONAL_DATA_NATIONAL));
            assertEquals("", msg.get(_048_ADDITIONAL_DATA));

            assertEquals("0000000000", msg.get(_074_CREDITS_NUMBER));
            assertEquals("0000000000", msg.get(_075_CREDITS_REVERSAL_NUMBER));
            assertEquals("0000000000", msg.get(_076_DEBITS_NUMBER));
            assertEquals("0000000000", msg.get(_077_DEBITS_REVERSAL_NUMBER));
            assertEquals("0000000000", msg.get(_078_TRANSFER_NUMBER));
            assertEquals("0000000000", msg.get(_079_TRANSFER_REVERSAL_NUMBER));
            assertEquals("0000000000", msg.get(_080_INQUIRIES_NUMBER));
            assertEquals("0000000000", msg.get(_081_AUTHORISATIONS_NUMBER));

            assertEquals("0000000000000000", msg.get(_086_CREDITS_AMOUNT));
            assertEquals("0000000000000000", msg.get(_087_CREDITS_REVERSAL_AMOUNT));
            assertEquals("0000000000000000", msg.get(_088_DEBITS_AMOUNT));
            assertEquals("0000000000000000", msg.get(_089_DEBITS_REVERSAL_AMOUNT));
            assertEquals("200000000000000000", msg.get(_097_AMOUNT_NET_SETTLEMENT));
            assertEquals("0000000000", msg.get(DE_118_CASHOUTS_NUMBER));
            assertEquals("0000000000000000", msg.get(DE_119_CASHOUTS_AMOUNT));
            assertEquals("F7B1FC9000000000", msg.get(DE_128_MAC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0800Pack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0800_NWRK_MNG_REQ);
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "074892");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "W1864005");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "611000602001864");
            msg.set(_048_ADDITIONAL_DATA, "062008080363142903430B3FD7FF79522669E99B6C748D4B3B");
            //msg.set(_060_ADDITIONAL_PRIVATE, "s/w vers 1234");
            msg.set(DE_070_NMIC, "101");

            byte[] actual = msg.toMsg();
            byte[] expected = {0x08, 0x00, (byte) 0x80, 0x20, 0x00, 0x01, 0x00, (byte) 0xc1, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x48,
                    (byte) 0x92, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x57, 0x31, 0x38, 0x36, 0x34, 0x30, 0x30, 0x35, 0x36, 0x31, 0x31, 0x30, 0x30,
                    0x30, 0x36, 0x30, 0x32, 0x30, 0x30, 0x31, 0x38, 0x36, 0x34, 0x30, 0x32, 0x35, 0x06, 0x20, 0x08, 0x08, 0x03, 0x63, 0x14, 0x29, 0x03, 0x43, 0x0b,
                    0x3f, (byte) 0xd7, (byte) 0xff, 0x79, 0x52, 0x26, 0x69, (byte) 0xe9, (byte) 0x9b, 0x6c, 0x74, (byte) 0x8d, 0x4b, 0x3b, 0x01, 0x01};
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0810Unpack() {

        try {
            final byte[] inputData = {0x08, 0x10, (byte) 0x80, 0x38, 0x00, 0x01, 0x02, (byte) 0xe1, (byte) 0x88, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
                    0x48, (byte) 0x92, 0x10, 0x31, 0x52, 0x09, 0x05, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x30, 0x30, 0x57, 0x31, 0x38, 0x36, 0x34, 0x30, 0x30, 0x35,
                    0x36, 0x31, 0x31, 0x30, 0x30, 0x30, 0x36, 0x30, 0x32, 0x30, 0x30, 0x31, 0x38, 0x36, 0x34, 0x57, 0x4f, 0x4f, 0x4c, 0x57, 0x4f, 0x52, 0x54, 0x48, 0x53, 0x20,
                    0x20, 0x20, 0x20, 0x20, 0x20, 0x31, 0x38, 0x36, 0x34, 0x4b, 0x49, 0x4e, 0x47, 0x53, 0x47, 0x52, 0x4f, 0x56, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
                    0x4e, 0x53, 0x57, 0x31, 0x31, 0x35, 0x3f, (byte) 0xfc, 0x73, (byte) 0xb6, 0x0d, (byte) 0xfb, 0x7a, 0x53, (byte) 0xcd, 0x5c, 0x73, (byte) 0xaf, (byte) 0xe3,
                    0x3c, (byte) 0xce, (byte) 0xc1, (byte) 0xdf, 0x3b, (byte) 0x8f, 0x08, 0x04, 0x50, (byte) 0xb7, (byte) 0xbe, 0x60, 0x40, (byte) 0xf0, (byte) 0xcb, (byte) 0x85,
                    (byte) 0xf6, 0x7b, 0x72, 0x06, 0x4e, 0x52, 0x51, (byte) 0xd4, (byte) 0xa1, (byte) 0xf6, (byte) 0xfd, (byte) 0xd1, 0x3c, 0x24, 0x0c, 0x1d, 0x11, 0x0b, 0x24, 0x00,
                    (byte) 0xba, (byte) 0xb8, 0x55, 0x40, 0x45, 0x02, (byte) 0xc0, 0x3e, 0x0c, 0x0c, (byte) 0xdd, (byte) 0xd4, 0x17, (byte) 0xa0, (byte) 0xb1, (byte) 0xcf, (byte) 0x93,
                    0x60, 0x01, (byte) 0xd1, 0x30, (byte) 0xc6, 0x50, 0x7a, (byte) 0x88, 0x07, 0x2b, 0x22, (byte) 0xfe, 0x34, (byte) 0xd1, (byte) 0xa4, 0x07, (byte) 0xad, 0x09,
                    (byte) 0xb8, 0x59, 0x5a, 0x13, (byte) 0x89, 0x05, 0x46, 0x75, (byte) 0xad, (byte) 0xfa, (byte) 0xaa, 0x3f, 0x46, 0x53, (byte) 0xb4, 0x60, 0x0b, (byte) 0xa6,
                    (byte) 0x8d, (byte) 0xc2, (byte) 0xc2, (byte) 0x9b, (byte) 0xf6, 0x64, (byte) 0xca, 0x1c, 0x2d, (byte) 0xb2, (byte) 0xb3, 0x38, 0x72, 0x00, 0x36, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01};
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0810_NWRK_MNG_REQ_RSP, msg.getMsgType());
            assertEquals("074892", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("103152", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("0905", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("W1864005", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("611000602001864", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("WOOLWORTHS      1864KINGSGROVE       NSW", msg.get(_043_CARD_ACCEPTOR_NAME_LOCATION));
            assertEquals(
                    "3FFC73B60DFB7A53CD5C73AFE33CCEC1DF3B8F080450B7BE6040F0CB85F67B72064E5251D4A1F6FDD13C240C1D110B2400BAB855404502C03E0C0CDDD417A0B1CF936001D130C6507A88072B22FE34D1A407AD09B8595A1389054675ADFAAA3F4653B4600BA68DC2C29BF664CA1C2DB2B33872", msg.get(_048_ADDITIONAL_DATA)); // This now will return the string value
            assertEquals("036", msg.get(_049_TRAN_CURRENCY_CODE));
            assertEquals("0000000000000001", msg.get(_053_SECURITY_RELATED_CONTROL_INFORMATION));
            assertEquals("101", msg.get(DE_070_NMIC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0800RSA191Pack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0800_NWRK_MNG_REQ);
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "000000");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "N9393001");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "057998206712988");
            msg.set(_048_ADDITIONAL_DATA,
                    "03588566d270f22eacf74cd974d9c13b236c4564e2b5d16ecc080ad2ff0140837da6ca1d61b57947927a6909cb2d66027e1463b90f9f4505889f55740ac08e8261315cfdc4f8eff8bbbf965bb2f1bc4efd2dfc59a4d00616afba703962fb59ef5a4984fffd04ec32376fee595f02849e1955658ffaad8514a8d77db13df71f9ceb106246a639263be047fe30c2985d7edfc3a68c9eeae1c6f9342575fe34c0f77ec95d2d17656dd80e09da62f2bf012269c575b7298c030b4a044ea0ae05b7274d4b4c92fdb7bbadf492b2f381d6ffeca3d83a42fb8bc796db279f873a194ae22df571145abccec6a5d3f2d4a4493cfe7944bea9fd75a8279c364bc10df59f4ded055262200808007750343030202020");
            //msg.set(_060_ADDITIONAL_PRIVATE, "s/w vers 1234");
            msg.set(DE_070_NMIC, "191");

            byte[] actual = msg.toMsg();
            byte[] expected = {
                    0x08, 0x00, (byte) 0x80, 0x20, 0x00, 0x01, 0x00, (byte) 0xc1, 0x00, 0x00,
                    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x4e,
                    0x39, 0x33, 0x39, 0x33, 0x30, 0x30, 0x31, 0x30, 0x35, 0x37,
                    0x39, 0x39, 0x38, 0x32, 0x30, 0x36, 0x37, 0x31, 0x32, 0x39,
                    0x38, 0x38, 0x32, 0x37, 0x32, 0x03, 0x58, (byte) 0x85, 0x66, (byte) 0xd2,
                    0x70, (byte) 0xf2, 0x2e, (byte) 0xac, (byte) 0xf7, 0x4c, (byte) 0xd9, 0x74, (byte) 0xd9, (byte) 0xc1,
                    0x3b, 0x23, 0x6c, 0x45, 0x64, (byte) 0xe2, (byte) 0xb5, (byte) 0xd1, 0x6e, (byte) 0xcc,
                    0x08, 0x0a, (byte) 0xd2, (byte) 0xff, 0x01, 0x40, (byte) 0x83, 0x7d, (byte) 0xa6, (byte) 0xca,
                    0x1d, 0x61, (byte) 0xb5, 0x79, 0x47, (byte) 0x92, 0x7a, 0x69, 0x09, (byte) 0xcb,
                    0x2d, 0x66, 0x02, 0x7e, 0x14, 0x63, (byte) 0xb9, 0x0f, (byte) 0x9f, 0x45,
                    0x05, (byte) 0x88, (byte) 0x9f, 0x55, 0x74, 0x0a, (byte) 0xc0, (byte) 0x8e, (byte) 0x82, 0x61,
                    0x31, 0x5c, (byte) 0xfd, (byte) 0xc4, (byte) 0xf8, (byte) 0xef, (byte) 0xf8, (byte) 0xbb, (byte) 0xbf, (byte) 0x96,
                    0x5b, (byte) 0xb2, (byte) 0xf1, (byte) 0xbc, 0x4e, (byte) 0xfd, 0x2d, (byte) 0xfc, 0x59, (byte) 0xa4,
                    (byte) 0xd0, 0x06, 0x16, (byte) 0xaf, (byte) 0xba, 0x70, 0x39, 0x62, (byte) 0xfb, 0x59,
                    (byte) 0xef, 0x5a, 0x49, (byte) 0x84, (byte) 0xff, (byte) 0xfd, 0x04, (byte) 0xec, 0x32, 0x37,
                    0x6f, (byte) 0xee, 0x59, 0x5f, 0x02, (byte) 0x84, (byte) 0x9e, 0x19, 0x55, 0x65,
                    (byte) 0x8f, (byte) 0xfa, (byte) 0xad, (byte) 0x85, 0x14, (byte) 0xa8, (byte) 0xd7, 0x7d, (byte) 0xb1, 0x3d,
                    (byte) 0xf7, 0x1f, (byte) 0x9c, (byte) 0xeb, 0x10, 0x62, 0x46, (byte) 0xa6, 0x39, 0x26,
                    0x3b, (byte) 0xe0, 0x47, (byte) 0xfe, 0x30, (byte) 0xc2, (byte) 0x98, 0x5d, 0x7e, (byte) 0xdf,
                    (byte) 0xc3, (byte) 0xa6, (byte) 0x8c, (byte) 0x9e, (byte) 0xea, (byte) 0xe1, (byte) 0xc6, (byte) 0xf9, 0x34, 0x25,
                    0x75, (byte) 0xfe, 0x34, (byte) 0xc0, (byte) 0xf7, 0x7e, (byte) 0xc9, 0x5d, 0x2d, 0x17,
                    0x65, 0x6d, (byte) 0xd8, 0x0e, 0x09, (byte) 0xda, 0x62, (byte) 0xf2, (byte) 0xbf, 0x01,
                    0x22, 0x69, (byte) 0xc5, 0x75, (byte) 0xb7, 0x29, (byte) 0x8c, 0x03, 0x0b, 0x4a,
                    0x04, 0x4e, (byte) 0xa0, (byte) 0xae, 0x05, (byte) 0xb7, 0x27, 0x4d, 0x4b, 0x4c,
                    (byte) 0x92, (byte) 0xfd, (byte) 0xb7, (byte) 0xbb, (byte) 0xad, (byte) 0xf4, (byte) 0x92, (byte) 0xb2, (byte) 0xf3, (byte) 0x81,
                    (byte) 0xd6, (byte) 0xff, (byte) 0xec, (byte) 0xa3, (byte) 0xd8, 0x3a, 0x42, (byte) 0xfb, (byte) 0x8b, (byte) 0xc7,
                    (byte) 0x96, (byte) 0xdb, 0x27, (byte) 0x9f, (byte) 0x87, 0x3a, 0x19, 0x4a, (byte) 0xe2, 0x2d,
                    (byte) 0xf5, 0x71, 0x14, 0x5a, (byte) 0xbc, (byte) 0xce, (byte) 0xc6, (byte) 0xa5, (byte) 0xd3, (byte) 0xf2,
                    (byte) 0xd4, (byte) 0xa4, 0x49, 0x3c, (byte) 0xfe, 0x79, 0x44, (byte) 0xbe, (byte) 0xa9, (byte) 0xfd,
                    0x75, (byte) 0xa8, 0x27, (byte) 0x9c, 0x36, 0x4b, (byte) 0xc1, 0x0d, (byte) 0xf5, (byte) 0x9f,
                    0x4d, (byte) 0xed, 0x05, 0x52, 0x62, 0x20, 0x08, 0x08, 0x00, 0x77,
                    0x50, 0x34, 0x30, 0x30, 0x20, 0x20, 0x20, 0x01, (byte) 0x91};
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0810RSA191Unpack() {

        try {
            final byte[] inputData = {
                    0x08, 0x10, (byte) 0x80, 0x38, 0x00, 0x01, 0x02, (byte) 0xc1, (byte) 0x80, 0x00,
                    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x01, 0x59, 0x22, 0x09, 0x16, 0x11, 0x00, 0x06,
                    0x28, 0x00, 0x00, 0x0f, 0x30, 0x30, 0x4e, 0x39, 0x33, 0x39,
                    0x33, 0x30, 0x30, 0x31, 0x30, 0x35, 0x37, 0x39, 0x39, 0x38
                    , 0x32, 0x30, 0x36, 0x37, 0x31, 0x32, 0x39, 0x38, 0x38, 0x32,
                    0x33, 0x32, (byte) 0xc7, 0x5f, (byte) 0xee, 0x33, (byte) 0xb8, (byte) 0xa8, (byte) 0xaa, (byte) 0x82,
                    0x10, (byte) 0xfe, 0x0c, 0x50, (byte) 0xef, 0x12, 0x1b, (byte) 0x82, 0x7d, (byte) 0xfe,
                    0x34, (byte) 0xc7, 0x25, (byte) 0xe9, 0x7a, (byte) 0xc2, (byte) 0xc2, 0x2f, (byte) 0x98, 0x2f,
                    0x7d, (byte) 0xaf, 0x2e, (byte) 0xe7, 0x61, 0x08, (byte) 0xbc, (byte) 0x90, (byte) 0xa3, 0x00,
                    0x58, 0x6e, 0x22, 0x77, 0x3c, 0x39, 0x42, 0x72, 0x2a, 0x3e,
                    0x2c, 0x45, (byte) 0xb0, 0x31, (byte) 0xb6, 0x39, 0x58, 0x60, (byte) 0xdb, (byte) 0xe7,
                    0x6a, 0x21, (byte) 0xf1, (byte) 0xe6, 0x7e, (byte) 0xd4, (byte) 0xa3, (byte) 0xbe, (byte) 0x84, (byte) 0xa2,
                    (byte) 0x8f, 0x55, (byte) 0xac, 0x14, (byte) 0xae, (byte) 0x85, 0x2c, (byte) 0x9f, (byte) 0xeb, (byte) 0x82,
                    0x55, (byte) 0x93, (byte) 0x9c, 0x30, 0x0a, (byte) 0xad, (byte) 0xa8, 0x55, (byte) 0xbf, 0x64,
                    0x2a, (byte) 0xa9, (byte) 0xab, 0x4c, (byte) 0x85, 0x56, 0x49, (byte) 0xf8, (byte) 0xfc, 0x18,
                    (byte) 0xa9, (byte) 0x95, 0x62, 0x35, (byte) 0x89, (byte) 0xdb, (byte) 0xed, 0x4d, 0x49, (byte) 0xee,
                    0x14, 0x73, (byte) 0xe5, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x32, 0x48, 0x6d, (byte) 0xa8,
                    (byte) 0xd5, (byte) 0xe4, (byte) 0xa3, 0x14, 0x00, 0x00, 0x01, (byte) 0x91
            };
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0810_NWRK_MNG_REQ_RSP, msg.getMsgType());
            assertEquals("000000", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("015922", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("0916", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("N9393001", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("057998206712988", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals(
                    "c75fee33b8a8aa8210fe0c50ef121b827dfe34c725e97ac2c22f982f7daf2ee76108bc90a300586e22773c3942722a3e2c45b031b6395860dbe76a21f1e67ed4a3be84a28f55ac14ae852c9feb8255939c300aada855bf642aa9ab4c855649f8fc18a995623589dbed4d49ee1473e5190000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000132486da8d5e4a314".toUpperCase(), msg.get(_048_ADDITIONAL_DATA)); // This now will return the string value
            assertEquals("000", msg.get(_049_TRAN_CURRENCY_CODE));
            assertEquals("191", msg.get(DE_070_NMIC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0800RSA192Pack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0800_NWRK_MNG_REQ);
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "000000");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "N9393001");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "057998206712988");
            msg.set(_048_ADDITIONAL_DATA,
                    "03193f7461be5378f3636fce90a7e3d330aac3944e47af6e421e6b853515f0ab40b531f60366ec6d4e92f4d665e5583e384e60ff396a60ed8acdb0e6990d45d8186cf584c7308f2dcd57aad3c3405b2805af9bfea2421d41ea728225a41f287ec6b16f8cc2442916dcd67d36acba66a0e57bac998fc64a17a90552622008080077");
            msg.set(DE_070_NMIC, "192");

            byte[] actual = msg.toMsg();
            byte[] expected = {
                    0x08, 0x00, (byte) 0x80, 0x20, 0x00, 0x01, 0x00, (byte) 0xc1, 0x00, 0x00,
                    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x4e,
                    0x39, 0x33, 0x39, 0x33, 0x30, 0x30, 0x31, 0x30, 0x35, 0x37,
                    0x39, 0x39, 0x38, 0x32, 0x30, 0x36, 0x37, 0x31, 0x32, 0x39,
                    0x38, 0x38, 0x31, 0x32, 0x39, 0x03, 0x19, 0x3f, 0x74, 0x61,
                    (byte) 0xbe, 0x53, 0x78, (byte) 0xf3, 0x63, 0x6f, (byte) 0xce, (byte) 0x90, (byte) 0xa7, (byte) 0xe3,
                    (byte) 0xd3, 0x30, (byte) 0xaa, (byte) 0xc3, (byte) 0x94, 0x4e, 0x47, (byte) 0xaf, 0x6e, 0x42,
                    0x1e, 0x6b, (byte) 0x85, 0x35, 0x15, (byte) 0xf0, (byte) 0xab, 0x40, (byte) 0xb5, 0x31,
                    (byte) 0xf6, 0x03, 0x66, (byte) 0xec, 0x6d, 0x4e, (byte) 0x92, (byte) 0xf4, (byte) 0xd6, 0x65,
                    (byte) 0xe5, 0x58, 0x3e, 0x38, 0x4e, 0x60, (byte) 0xff, 0x39, 0x6a, 0x60,
                    (byte) 0xed, (byte) 0x8a, (byte) 0xcd, (byte) 0xb0, (byte) 0xe6, (byte) 0x99, 0x0d, 0x45, (byte) 0xd8, 0x18,
                    0x6c, (byte) 0xf5, (byte) 0x84, (byte) 0xc7, 0x30, (byte) 0x8f, 0x2d, (byte) 0xcd, 0x57, (byte) 0xaa,
                    (byte) 0xd3, (byte) 0xc3, 0x40, 0x5b, 0x28, 0x05, (byte) 0xaf, (byte) 0x9b, (byte) 0xfe, (byte) 0xa2,
                    0x42, 0x1d, 0x41, (byte) 0xea, 0x72, (byte) 0x82, 0x25, (byte) 0xa4, 0x1f, 0x28,
                    0x7e, (byte) 0xc6, (byte) 0xb1, 0x6f, (byte) 0x8c, (byte) 0xc2, 0x44, 0x29, 0x16, (byte) 0xdc,
                    (byte) 0xd6, 0x7d, 0x36, (byte) 0xac, (byte) 0xba, 0x66, (byte) 0xa0, (byte) 0xe5, 0x7b, (byte) 0xac,
                    (byte) 0x99, (byte) 0x8f, (byte) 0xc6, 0x4a, 0x17, (byte) 0xa9, 0x05, 0x52, 0x62, 0x20,
                    0x08, 0x08, 0x00, 0x77, 0x01, (byte) 0x92
            };
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0810RSA192Unpack() {

        try {
            final byte[] inputData = {
                    0x08, 0x10, (byte) 0x80, 0x38, 0x00, 0x01, 0x02, (byte) 0xc1, (byte) 0x80, 0x00,
                    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x01, 0x59, 0x24, 0x09, 0x16, 0x11, 0x00, 0x06,
                    0x28, 0x00, 0x00, 0x0f, 0x30, 0x30, 0x4e, 0x39, 0x33, 0x39,
                    0x33, 0x30, 0x30, 0x31, 0x30, 0x35, 0x37, 0x39, 0x39, 0x38,
                    0x32, 0x30, 0x36, 0x37, 0x31, 0x32, 0x39, 0x38, 0x38, 0x30,
                    0x33, 0x38, 0x7b, (byte) 0xd8, 0x2f, (byte) 0xc5, (byte) 0x82, 0x3d, 0x44, (byte) 0xc3,
                    (byte) 0x90, 0x2e, 0x0b, 0x25, (byte) 0xbd, (byte) 0xe3, (byte) 0xba, 0x17, 0x58, 0x63,
                    0x04, 0x42, 0x59, 0x2c, 0x25, 0x09, 0x09, (byte) 0xa9, (byte) 0xdc, 0x66,
                    0x3b, 0x3c, 0x3b, (byte) 0xf5, 0x30, 0x38, 0x62, (byte) 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x01, (byte) 0x92
            };
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0810_NWRK_MNG_REQ_RSP, msg.getMsgType());
            assertEquals("000000", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("015924", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("0916", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("N9393001", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("057998206712988", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("7bd82fc5823d44c3902e0b25bde3ba1758630442592c250909a9dc663b3c3bf5303862800000".toUpperCase(), msg.get(_048_ADDITIONAL_DATA)); // This now will return the string value
            assertEquals("000", msg.get(_049_TRAN_CURRENCY_CODE));
            assertEquals("192", msg.get(DE_070_NMIC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0800RSA193Pack() {
        try {

            As2805Till msg = new As2805Till();

            msg.setMsgType(Iso8583.MsgType._0800_NWRK_MNG_REQ);
            msg.set(_011_SYS_TRACE_AUDIT_NUM, "000000");
            msg.set(_032_ACQUIRING_INST_ID_CODE, "00062800000");
            msg.set(_041_CARD_ACCEPTOR_TERMINAL_ID, "N9393001");
            msg.set(_042_CARD_ACCEPTOR_ID_CODE, "057998206712988");
            msg.set(_048_ADDITIONAL_DATA, "030ca7e583000000000552622008080077");
            msg.set(DE_070_NMIC, "193");

            byte[] actual = msg.toMsg();
            byte[] expected = {
                    0x08, 0x00, (byte) 0x80, 0x20, 0x00, 0x01, 0x00, (byte) 0xc1, 0x00, 0x00,
                    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x11, 0x00, 0x06, 0x28, 0x00, 0x00, 0x0f, 0x4e,
                    0x39, 0x33, 0x39, 0x33, 0x30, 0x30, 0x31, 0x30, 0x35, 0x37,
                    0x39, 0x39, 0x38, 0x32, 0x30, 0x36, 0x37, 0x31, 0x32, 0x39,
                    0x38, 0x38, 0x30, 0x31, 0x37, 0x03, 0x0c, (byte) 0xa7, (byte) 0xe5, (byte) 0x83,
                    0x00, 0x00, 0x00, 0x00, 0x05, 0x52, 0x62, 0x20, 0x08, 0x08,
                    0x00, 0x77, 0x01, (byte) 0x93
            };
            assertArrayEquals(expected, actual);

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void test0810RSA193Unpack() {

        try {
            final byte[] inputData = {
                    0x08, 0x10, (byte) 0x80, 0x38, 0x00, 0x01, 0x02, (byte) 0xc1, (byte) 0x80, 0x00,
                    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x01, 0x59, 0x25, 0x09, 0x16, 0x11, 0x00, 0x06,
                    0x28, 0x00, 0x00, 0x0f, 0x30, 0x30, 0x4e, 0x39, 0x33, 0x39,
                    0x33, 0x30, 0x30, 0x31, 0x30, 0x35, 0x37, 0x39, 0x39, 0x38,
                    0x32, 0x30, 0x36, 0x37, 0x31, 0x32, 0x39, 0x38, 0x38, 0x30,
                    0x34, 0x39, (byte) 0xfb, (byte) 0xa3, 0x7c, 0x5c, (byte) 0xc3, (byte) 0x8e, (byte) 0xf8, (byte) 0xf2,
                    (byte) 0x93, 0x12, 0x30, 0x53, 0x78, (byte) 0xec, (byte) 0x81, (byte) 0x9f, (byte) 0x9e, 0x0c,
                    (byte) 0xc3, (byte) 0xff, (byte) 0xf8, 0x2e, (byte) 0xb3, (byte) 0xdb, 0x40, 0x78, (byte) 0x86, 0x2f,
                    (byte) 0xc9, (byte) 0xa9, (byte) 0x87, (byte) 0xd4, (byte) 0xec, 0x41, 0x15, (byte) 0xf7, 0x61, 0x0d,
                    0x46, (byte) 0xd5, (byte) 0xbb, 0x76, 0x65, (byte) 0xa7, 0x2f, 0x32, (byte) 0xfc, (byte) 0xea,
                    (byte) 0x80, 0x00, 0x00, 0x01, (byte) 0x93

            };
            As2805Till msg = new As2805Till(inputData);

            assertEquals(Iso8583.MsgType._0810_NWRK_MNG_REQ_RSP, msg.getMsgType());
            assertEquals("000000", msg.get(_011_SYS_TRACE_AUDIT_NUM));
            assertEquals("015925", msg.get(_012_LOCAL_TRAN_TIME));
            assertEquals("0916", msg.get(_013_LOCAL_TRAN_DATE));
            assertEquals("00062800000", msg.get(_032_ACQUIRING_INST_ID_CODE));
            assertEquals("00", msg.get(_039_RESPONSE_CODE));
            assertEquals("N9393001", msg.get(_041_CARD_ACCEPTOR_TERMINAL_ID));
            assertEquals("057998206712988", msg.get(_042_CARD_ACCEPTOR_ID_CODE));
            assertEquals("fba37c5cc38ef8f29312305378ec819f9e0cc3fff82eb3db4078862fc9a987d4ec4115f7610d46d5bb7665a72f32fcea80".toUpperCase(), msg.get(_048_ADDITIONAL_DATA)); // This now will return the string value
            assertEquals("000", msg.get(_049_TRAN_CURRENCY_CODE));
            assertEquals("193", msg.get(DE_070_NMIC));

        } catch (IllegalArgumentException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

}

